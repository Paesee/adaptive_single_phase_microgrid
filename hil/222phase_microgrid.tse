version = 4.2

//
// Saved by sw version: 2024.1
//

model "11phase_microgrid" {
    configuration {
        hil_device = "HIL402"
        hil_configuration_id = 1
        simulation_method = exact
        simulation_time_step = auto
        simulation_discret_scaling = 1.0
        dsp_timer_periods = 100e-6, 50e-3
        ss_calc_method = "systematic elimination"
        enb_pole_shift = True
        enb_gds_oversampling = True
        show_modes = False
        device_ao_limit_enable = False
        reset_analog_outputs_on_sim_stop = True
        reset_analog_outputs_on_sim_stop_mode = Offset values
        reset_digital_outputs_on_sim_stop = True
        vhil_adio_loopback = False
        cpl_stb = False
        enb_dep_sw_detect = False
        code_section = "internal memory"
        data_section = "internal memory"
        sys_sp_rate_1 = 0.0001
        sys_sp_rate_2 = 0.05
        sys_real_type_precision = "default"
        user_real_type_precision = "default"
        sys_cpu_optimization = "high"
        user_cpu_optimization = "high"
        user_cpu_part_option = "default"
        matrix_based_reduction = True
        cpl_dynamics_analysis = False
        export_ss_to_pickle = False
        ground_scope_core = False
        dss_num_tol = 1e-15
        cce_platform = "generic"
        cce_use_relative_names = False
        cce_type_mapping_real = "double"
        cce_type_mapping_uint = "unsigned int"
        cce_type_mapping_int = "int"
        cce_platform = "generic"
        cce_use_relative_names = False
        cce_type_mapping_real = "double"
        cce_type_mapping_uint = "unsigned int"
        cce_type_mapping_int = "int"
        cce_directory = ""
        cce_custom_type_int = ""
        cce_custom_type_uint = ""
        cce_custom_type_real = ""
        tunable_params = "component defined"
        sp_compiler_type = "C compiler"
        sig_stim = "off"
        export_resource_list = ""
        export_dependency_list = ""
        excluded_resource_list = ""
        export_out_file = ""
        export_lock_top_level = True
        export_encrypt_library = True
        export_encrypt_resources = True
        dae_solver = "BDF"
        max_sim_step = 1e-4
        simulation_time = 1.0
        abs_tol = 1e-3
        rel_tol = 1e-3
        init_sim_step = 1e-6
        r_on_sw = 1e-3
        v_on_diode = 0.2
        data_sampling_rate = 0
        feedthrough_validation_error_level = error
    }

    component Subsystem Root {
        component "core/Ground" gnd3 {
        }
        [
            position = 8616, 8320
            hide_name = True
        ]

        component Subsystem Load {
            layout = dynamic
            component "core/Inductor" RL_L100 {
                inductance = "I_Lload"
            }
            [
                position = 8464, 8216
                rotation = right
            ]

            component "core/Resistor" R_R66 {
                resistance = "3*L_Rload/2"
            }
            [
                position = 8216, 8216
                rotation = right
            ]

            component "core/Single Pole Single Throw Contactor" S_R33 {
                ctrl_src = "Model"
            }
            [
                position = 8064, 8136
                rotation = right
                size = 64, 32
            ]

            component "core/Single Pole Single Throw Contactor" S_R66 {
                ctrl_src = "Model"
            }
            [
                position = 8216, 8136
                rotation = right
                size = 64, 32
            ]

            component "core/Resistor" R_R33 {
                resistance = "3*L_Rload"
            }
            [
                position = 8064, 8216
                rotation = right
            ]

            component "core/Single Pole Single Throw Contactor" S_RL100 {
                ctrl_src = "Model"
            }
            [
                position = 8464, 8128
                rotation = right
                size = 64, 32
            ]

            component "core/Resistor" RL_R100 {
                resistance = "I_Rload"
            }
            [
                position = 8368, 8216
                rotation = right
            ]

            component "core/Resistor" Short_R {
                resistance = "S_Rload"
            }
            [
                position = 7928, 8216
                rotation = right
            ]

            component "core/Single Phase Diode Rectifier" "Single Phase Diode Rectifier1" {
            }
            [
                position = 9016, 8168
                size = 127, 256
            ]

            component "core/Resistor" NL_Rs33 {
                resistance = "NL_Rs33"
            }
            [
                position = 8840, 8072
            ]

            component "core/Single Pole Single Throw Contactor" S_NL33 {
                ctrl_src = "Model"
            }
            [
                position = 8728, 8072
                size = 64, 32
            ]

            component "core/Capacitor" NL_C33 {
                capacitance = "NL_cap33"
            }
            [
                position = 9160, 8160
                rotation = right
            ]

            component "core/Resistor" NL_R33 {
                resistance = "NL_Rload33"
            }
            [
                position = 9272, 8160
                rotation = right
            ]

            component "core/C function" "Find voltage peak" {
                execution_rate = "Ts"
                global_variables = "real last_V_max;real V_max;real update_last_max;real enable_peak;real peak;"
                init_fnc = "/*Begin code section*/
last_V_max = 0;
V_max = 0;
/*End code section*/"
                input_terminals = "real V;inherit sig_S_Short;inherit sig_S_R33;inherit sig_S_R66;inherit sig_S_RL100;inherit sig_S_NL33;inherit sig_S_NL66;"
                input_terminals_dimensions = "inherit;inherit;inherit;inherit;inherit;inherit;inherit"
                input_terminals_feedthrough = "[\'\']"
                input_terminals_show_labels = "[(\'V\', True), (\'sig_S_Short\', True), (\'sig_S_R33\', True), (\'sig_S_R66\', True), (\'sig_S_RL100\', True), (\'sig_S_NL33\', True), (\'sig_S_NL66\', True)]"
                output_fnc = "/*Begin code section*/
// Since the V may change, it\'s max value is update every cycle
if(V<-10 && update_last_max == 1){
    last_V_max = V_max;
    V_max = 0;
    update_last_max = 0;
    enable_peak = 1;
    }
if(V > 10){
    update_last_max =1;
    }

// Updates V_max
if (V >= V_max){
    V_max = V;
    }

if (V >= 0.95*last_V_max && enable_peak==1){
    enable_peak = 0;
    peak = 1;
    }
    
// Update the contator state
if(peak == 1){
    peak = 0;
    S_Short = sig_S_Short;
    S_R33 = sig_S_R33;
    S_R66 = sig_S_R66;
    S_RL100 = sig_S_RL100;
    S_NL33 = sig_S_NL33;
    S_NL66 = sig_S_NL66;
    }
/*End code section*/"
                output_terminals = "real S_Short;inherit S_R33;inherit S_R66;inherit S_RL100;inherit S_NL33;inherit S_NL66;"
                output_terminals_dimensions = "inherit;inherit;inherit;inherit;inherit;inherit"
                output_terminals_feedthrough = "[\'\']"
                output_terminals_show_labels = "[(\'S_Short\', True), (\'S_R33\', True), (\'S_R66\', True), (\'S_RL100\', True), (\'S_NL33\', True), (\'S_NL66\', True)]"
            }
            [
                position = 8400, 7776
                size = 128, 360
            ]

            component "core/SCADA Input" sig_S_Short {
                execution_rate = "Ts"
                unit = ""
            }
            [
                position = 8176, 7680
            ]

            component "core/SCADA Input" sig_S_R33 {
                execution_rate = "Ts"
                unit = ""
            }
            [
                position = 8232, 7728
            ]

            component "core/SCADA Input" sig_S_R66 {
                execution_rate = "Ts"
                unit = ""
            }
            [
                position = 8176, 7776
            ]

            component "core/SCADA Input" sig_S_RL100 {
                execution_rate = "Ts"
                unit = ""
            }
            [
                position = 8232, 7824
            ]

            component "core/SCADA Input" sig_S_NL33 {
                execution_rate = "Ts"
                unit = ""
            }
            [
                position = 8176, 7872
            ]

            component "core/Voltage Measurement" V {
                execution_rate = "Ts"
                sig_output = "True"
            }
            [
                position = 7784, 8184
                rotation = right
                size = 64, 32
            ]

            component "core/Single Pole Single Throw Contactor" S_Short {
                ctrl_src = "Model"
            }
            [
                position = 7928, 8136
                rotation = right
                size = 64, 32
            ]

            component "core/Open Circuit" "Open Circuit1" {
                circuit_connector = "true"
            }
            [
                position = 8904, 8168
                rotation = right
                hide_name = True
            ]

            component "core/Single Phase TLM Core Coupling" "Core Coupling" {
                embedded_components = "True"
                inductance = "0.1e-6"
            }
            [
                position = 8576, 8168
                size = 12, 256
            ]

            component "core/Single Phase Diode Rectifier" "Single Phase Diode Rectifier2" {
            }
            [
                position = 9016, 8520
                size = 127, 256
            ]

            component "core/Resistor" NL_Rs66 {
                resistance = "NL_Rs66"
            }
            [
                position = 8840, 8424
            ]

            component "core/Capacitor" NL_C66 {
                capacitance = "NL_cap66"
            }
            [
                position = 9160, 8512
                rotation = right
            ]

            component "core/Open Circuit" "Open Circuit2" {
                circuit_connector = "true"
            }
            [
                position = 8904, 8520
                rotation = right
                hide_name = True
            ]

            component "core/Resistor" NL_R66 {
                resistance = "NL_Rload66"
            }
            [
                position = 9272, 8512
                rotation = right
            ]

            component "core/SCADA Input" sig_S_NL66 {
                execution_rate = "Ts"
                unit = ""
            }
            [
                position = 8232, 7920
            ]

            component "core/Single Pole Single Throw Contactor" S_NL66 {
                ctrl_src = "Model"
            }
            [
                position = 8744, 8424
                size = 64, 32
            ]

            port gnd {
                position = left:2
                kind = pe
            }
            [
                position = 7752, 8264
            ]

            port Va {
                position = left:1
                kind = pe
            }
            [
                position = 7752, 8072
            ]

            tag From1 {
                value = "V"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8224, 7632
                hide_name = True
            ]

            tag Goto1 {
                value = "V"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7816, 8136
                rotation = left
                hide_name = True
            ]

            tag Goto2 {
                value = "S_Short"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8536, 7616
                hide_name = True
            ]

            tag Goto3 {
                value = "S_R33"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8536, 7680
                hide_name = True
            ]

            tag Goto4 {
                value = "S_R66"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8536, 7744
                hide_name = True
            ]

            tag Goto5 {
                value = "S_RL100"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8536, 7808
                hide_name = True
            ]

            tag Goto6 {
                value = "S_NL33"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8536, 7872
                hide_name = True
            ]

            tag From2 {
                value = "S_Short"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7976, 8192
                rotation = left
                hide_name = True
            ]

            tag From3 {
                value = "S_R33"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8120, 8192
                rotation = left
                hide_name = True
            ]

            tag From4 {
                value = "S_R66"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8272, 8184
                rotation = left
                hide_name = True
            ]

            tag From5 {
                value = "S_RL100"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8512, 8168
                rotation = left
                hide_name = True
            ]

            tag From6 {
                value = "S_NL33"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8664, 8016
                hide_name = True
            ]

            tag Goto7 {
                value = "S_NL66"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8536, 7936
                hide_name = True
            ]

            tag From7 {
                value = "S_NL66"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8680, 8368
                hide_name = True
            ]

            junction Junction64 pe
            [
                position = 8216, 8072
            ]

            junction Junction65 pe
            [
                position = 8216, 8264
            ]

            junction Junction66 pe
            [
                position = 8368, 8264
            ]

            junction Junction68 pe
            [
                position = 8064, 8072
            ]

            junction Junction78 pe
            [
                position = 9160, 8264
            ]

            junction Junction84 pe
            [
                position = 7784, 8072
            ]

            junction Junction85 pe
            [
                position = 7784, 8264
            ]

            junction Junction87 pe
            [
                position = 7928, 8072
            ]

            junction Junction92 pe
            [
                position = 8904, 8072
            ]

            junction Junction93 pe
            [
                position = 8904, 8264
            ]

            junction Junction95 pe
            [
                position = 8464, 8072
            ]

            junction Junction96 pe
            [
                position = 8464, 8264
            ]

            junction Junction97 pe
            [
                position = 8464, 8176
            ]

            junction Junction98 pe
            [
                position = 7928, 8264
            ]

            junction Junction99 pe
            [
                position = 8064, 8264
            ]

            junction Junction104 pe
            [
                position = 8904, 8424
            ]

            junction Junction105 pe
            [
                position = 8904, 8616
            ]

            junction Junction108 pe
            [
                position = 8632, 8264
            ]

            junction Junction109 pe
            [
                position = 9160, 8424
            ]

            junction Junction110 pe
            [
                position = 9160, 8616
            ]

            junction Junction111 pe
            [
                position = 9160, 8072
            ]

            junction Junction112 pe
            [
                position = 8648, 8072
            ]

            connect S_R66.a_out R_R66.p_node as Connection480
            connect S_R66.a_in Junction64 as Connection483
            connect S_R33.a_out R_R33.p_node as Connection382
            connect Junction65 R_R66.n_node as Connection505
            connect Junction66 RL_R100.n_node as Connection507
            connect Junction65 Junction66 as Connection508
            connect S_R33.a_in Junction68 as Connection512
            connect Junction68 Junction64 as Connection513
            connect NL_Rs33.p_node S_NL33.a_out as Connection522
            connect NL_C33.n_node Junction78 as Connection552
            connect From1 "Find voltage peak.V" as Connection585
            connect sig_S_Short.out "Find voltage peak.sig_S_Short" as Connection586
            connect sig_S_R33.out "Find voltage peak.sig_S_R33" as Connection587
            connect sig_S_R66.out "Find voltage peak.sig_S_R66" as Connection588
            connect sig_S_RL100.out "Find voltage peak.sig_S_RL100" as Connection589
            connect sig_S_NL33.out "Find voltage peak.sig_S_NL33" as Connection590
            connect Goto2 "Find voltage peak.S_Short" as Connection591
            connect Goto3 "Find voltage peak.S_R33" as Connection592
            connect Goto4 "Find voltage peak.S_R66" as Connection593
            connect Goto5 "Find voltage peak.S_RL100" as Connection594
            connect Goto6 "Find voltage peak.S_NL33" as Connection595
            connect From3 S_R33.ctrl_in as Connection597
            connect From4 S_R66.ctrl_in as Connection598
            connect From5 S_RL100.ctrl_in as Connection599
            connect From6 S_NL33.ctrl_in as Connection600
            connect Va Junction84 as Connection605
            connect V.p_node Junction84 as Connection607
            connect Junction85 gnd as Connection609
            connect V.n_node Junction85 as Connection610
            connect Goto1 V.out as Connection611
            connect Junction68 Junction87 as Connection621
            [
                breakpoints = 8096, 8072; 8096, 8072
            ]
            connect Junction87 Junction84 as Connection622
            [
                breakpoints = 7928, 8072; 7800, 8072
            ]
            connect S_Short.a_in Junction87 as Connection623
            connect S_Short.a_out Short_R.p_node as Connection624
            connect From2 S_Short.ctrl_in as Connection625
            connect NL_Rs33.n_node Junction92 as Connection652
            connect Junction92 "Single Phase Diode Rectifier1.a_in" as Connection653
            connect "Open Circuit1.p_node" Junction92 as Connection654
            connect Junction93 "Single Phase Diode Rectifier1.b_in" as Connection656
            connect "Open Circuit1.n_node" Junction93 as Connection657
            connect Junction64 Junction95 as Connection701
            connect Junction95 S_RL100.a_in as Connection702
            connect "Core Coupling.a_in" Junction95 as Connection703
            connect Junction66 Junction96 as Connection704
            connect Junction96 RL_L100.n_node as Connection705
            connect "Core Coupling.b_in" Junction96 as Connection706
            connect "Single Phase Diode Rectifier1.neg_out" Junction78 as Connection712
            connect RL_R100.p_node Junction97 as Connection715
            connect Junction97 RL_L100.p_node as Connection716
            connect S_RL100.a_out Junction97 as Connection717
            connect Junction85 Junction98 as Connection720
            [
                breakpoints = 7784, 8264; 7800, 8264
            ]
            connect Junction98 Short_R.n_node as Connection721
            [
                breakpoints = 7928, 8264; 7928, 8264; 7928, 8264; 7928, 8264
            ]
            connect Junction65 Junction99 as Connection722
            [
                breakpoints = 8216, 8264
            ]
            connect Junction99 R_R33.n_node as Connection723
            [
                breakpoints = 8064, 8264
            ]
            connect Junction98 Junction99 as Connection724
            connect NL_Rs66.n_node Junction104 as Connection737
            connect Junction104 "Single Phase Diode Rectifier2.a_in" as Connection738
            connect "Open Circuit2.p_node" Junction104 as Connection739
            connect Junction105 "Single Phase Diode Rectifier2.b_in" as Connection740
            connect "Open Circuit2.n_node" Junction105 as Connection741
            connect Junction93 Junction108 as Connection751
            connect Junction108 "Core Coupling.b_out" as Connection752
            connect Junction105 Junction108 as Connection753
            [
                breakpoints = 8888, 8616; 8632, 8616; 8632, 8264
            ]
            connect Junction78 NL_R33.n_node as Connection754
            connect "Single Phase Diode Rectifier2.pos_out" Junction109 as Connection758
            connect Junction109 NL_C66.p_node as Connection759
            connect NL_R66.p_node Junction109 as Connection760
            connect NL_C66.n_node Junction110 as Connection761
            connect Junction110 "Single Phase Diode Rectifier2.neg_out" as Connection762
            connect NL_R66.n_node Junction110 as Connection763
            connect NL_C33.p_node Junction111 as Connection765
            connect Junction111 "Single Phase Diode Rectifier1.pos_out" as Connection766
            connect NL_R33.p_node Junction111 as Connection767
            connect sig_S_NL66.out "Find voltage peak.sig_S_NL66" as Connection768
            connect Goto7 "Find voltage peak.S_NL66" as Connection769
            connect From7 S_NL66.ctrl_in as Connection770
            connect S_NL66.a_out NL_Rs66.p_node as Connection772
            connect S_NL33.a_in Junction112 as Connection773
            connect Junction112 "Core Coupling.a_out" as Connection774
            [
                breakpoints = 8648, 8072
            ]
            connect S_NL66.a_in Junction112 as Connection775

            VA_nom = "VA_NOM"
            VA_nom_NL = "VA_NOM*0.5"
            Vrms_nom = "VRMS_NOM"
            f_nom = "F_NOM"

            mask {
                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">* Short circuit resistence = 0.1x Nominal power resistence</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">* Inductive load is computed for nominal power</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">* Linear load has 2 loads: first with 33% and second with 66% of the power</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">* Non-linear load has 2 loads: first with 33% and second with 66% of the power</p></body></html>"

                Vrms_nom {
                    label = "Nominal voltage RMS:"
                    widget = edit
                    type = generic
                    default_value = "Vrms_nom"
                }

                f_nom {
                    label = "Nominal frequency"
                    widget = edit
                    type = generic
                    default_value = "f_nom"
                }

                VA_nom {
                    label = "Nominal Power (VA) - Linear"
                    widget = edit
                    type = generic
                    default_value = "VA_nom"
                }

                VA_nom_NL {
                    label = "Nominal Power (VA) - Non-Linear"
                    widget = edit
                    type = generic
                    default_value = "VA_nom*0.5"
                }

                PF {
                    label = "Power Factor for Inductive Load"
                    widget = edit
                    type = generic
                    default_value = "0.7"
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                
                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()
                    
                ENDCODE

                CODE pre_compile
                    # HEADER START
                    Vrms_nom = mdl.get_property_value(mdl.prop(item_handle, "Vrms_nom"))
                    f_nom = mdl.get_property_value(mdl.prop(item_handle, "f_nom"))
                    VA_nom = mdl.get_property_value(mdl.prop(item_handle, "VA_nom"))
                    VA_nom_NL = mdl.get_property_value(mdl.prop(item_handle, "VA_nom_NL"))
                    PF = mdl.get_property_value(mdl.prop(item_handle, "PF"))
                    # HEADER STOP
                    import numpy as np
                    
                    Eref = Vrms_nom * np.sqrt(2)
                    
                    # Linear
                    L_Rload = 0.5*Eref**2/VA_nom
                    
                    # Inductive
                    I_P = PF * VA_nom
                    I_Q = np.sqrt(VA_nom**2 - I_P**2)
                    I_Rload = Vrms_nom**2/I_P
                    I_Lload = Vrms_nom**2/(2*np.pi*f_nom*I_Q)
                    
                    # Short
                    S_Rload = L_Rload/10
                    
                    # Non-linear load
                    NL_Rs = 0.02*Eref**2/VA_nom_NL
                    NL_Rload = (1.1276*Eref**2)/VA_nom_NL
                    NL_cap = 47.1239/(f_nom * NL_Rload)
                    
                    NL_Rs33 = NL_Rs/0.33
                    NL_Rs66 = NL_Rs/0.66
                    NL_Rload33 = NL_Rload/0.33
                    NL_Rload66 = NL_Rload/0.66
                    NL_cap33 = 0.33*NL_cap
                    NL_cap66 = 0.66*NL_cap
                ENDCODE
            }
        }
        [
            position = 8832, 8248
            size = 72, 120
        ]

        component "core/Inductor" L_load {
            initial_current = "L_LOAD"
            signal_access = "Inherit"
        }
        [
            position = 8712, 8208
        ]

        component "core/Resistor" R_load {
            resistance = "R_LOAD"
        }
        [
            position = 8616, 8208
        ]

        component "core/Inductor" L_vsc1 {
            initial_current = "L_LOAD"
            signal_access = "Inherit"
        }
        [
            position = 8416, 8208
        ]

        component "core/Resistor" R_vsc1 {
            resistance = "R_LOAD"
        }
        [
            position = 8320, 8208
        ]

        component Subsystem Grid {
            layout = dynamic
            component "core/Resistor" Rg {
                resistance = "grid_R"
            }
            [
                position = 8560, 8120
                rotation = down
            ]

            component "core/Inductor" Lg {
                inductance = "grid_L"
            }
            [
                position = 8432, 8120
                rotation = down
                scale = 1, -1
            ]

            component "core/SCADA Input" Vrms {
                def_value = "220"
                execution_rate = "50e-6"
                unit = ""
            }
            [
                position = 8240, 8128
                rotation = right
            ]

            component "core/SCADA Input" Flag {
                execution_rate = "50e-6"
                unit = ""
            }
            [
                position = 7880, 8136
            ]

            component "core/Constant" Constant1 {
                execution_rate = "50e-6"
                value = "0"
            }
            [
                position = 8216, 8208
            ]

            component "core/Probe" freq_ref {
            }
            [
                position = 8224, 8080
            ]

            component "core/SCADA Input" F_NADIR {
                def_value = "10"
                execution_rate = "50e-6"
                unit = ""
            }
            [
                position = 7920, 8168
            ]

            component "core/SCADA Input" ROCOF {
                def_value = "0.99995"
                execution_rate = "50e-6"
                unit = ""
            }
            [
                position = 7968, 8200
            ]

            component "core/Probe" flag {
            }
            [
                position = 7976, 8072
            ]

            component "core/C function" "C function2" {
                execution_rate = "50e-6"
                global_variables = "real count;real imp;real duration;real a;real amp;real Ts;real flag_a;real pi;real w1;real kf;real k;"
                init_fnc = "/*Begin code section*/
count = 0;
Ts=50e-6;
k=10000000000;
flag_a=0;
pi=3.1415;
/*End code section*/"
                input_terminals = "real flag;real F_Nadir;real ROCOF;real f_nom;"
                input_terminals_dimensions = "inherit;inherit;inherit;inherit"
                input_terminals_feedthrough = "[\'\']"
                input_terminals_show_labels = "[(\'flag\', True), (\'F_Nadir\', True), (\'ROCOF\', True), (\'f_nom\', True)]"
                output_fnc = "/*Begin code section*/
w1=ROCOF/(f_nom-F_Nadir);


kf=pi/w1/Ts;

if (flag>flag_a) k=0;

if ( k<kf  )
   {
     freq=f_nom-(f_nom-F_Nadir)*sin(w1*k*Ts);
     k=k+1;  
   }
else freq=f_nom;

flag_a=flag;

timer=timer+Ts;
/*End code section*/"
                output_terminals = "real freq;real timer;"
                output_terminals_dimensions = "inherit;inherit"
                output_terminals_feedthrough = "[\'\']"
                output_terminals_show_labels = "[(\'freq\', True), (\'timer\', True)]"
            }
            [
                position = 8112, 8184
                size = 80, 152
            ]

            component "core/Signal Controlled Sinusoidal Voltage Source" Vs {
            }
            [
                position = 8320, 8184
                size = 64, 80
            ]

            component "core/SCADA Input" freq {
                def_value = "60"
                execution_rate = "50e-6"
                unit = ""
            }
            [
                position = 8016, 8232
            ]

            component "core/Probe" Timer {
            }
            [
                position = 8240, 8280
            ]

            port N {
                position = left:2
                kind = pe
            }
            [
                position = 8640, 8256
                rotation = down
            ]

            port L {
                position = left:1
                kind = pe
            }
            [
                position = 8640, 8120
                rotation = down
            ]

            junction Junction60 sp
            [
                position = 7944, 8136
            ]

            junction Junction61 sp
            [
                position = 8168, 8128
            ]

            connect Rg.p_node L as Connection2
            connect Lg.p_node Rg.n_node as Connection3
            connect Flag.out Junction60 as Connection455
            connect Junction60 flag.in as Connection456
            connect "C function2.flag" Junction60 as Connection457
            connect F_NADIR.out "C function2.F_Nadir" as Connection458
            connect ROCOF.out "C function2.ROCOF" as Connection459
            connect Vs.p Lg.n_node as Connection461
            connect Vs.n N as Connection462
            connect Vrms.out Vs.Rms as Connection464
            connect Constant1.out Vs.Ph as Connection465
            connect Timer.in "C function2.timer" as Connection470
            [
                breakpoints = 8168, 8248
            ]
            connect freq.out "C function2.f_nom" as Connection480
            [
                breakpoints = 8048, 8232
            ]
            connect Vs.f Junction61 as Connection481
            [
                breakpoints = 8184, 8184; 8176, 8184
            ]
            connect Junction61 "C function2.freq" as Connection482
            connect freq_ref.in Junction61 as Connection483
            [
                breakpoints = 8168, 8096
            ]

            mask {
                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                
                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()
                    
                ENDCODE

                CODE define_icon
                    mdl.set_component_icon_image(item_handle, "images\motor_losses.svg")
                ENDCODE
            }
        }
        [
            position = 8968, 8048
            size = 72, 136
        ]

        component Subsystem "MGCC STS" {
            layout = dynamic
            component "core/Double Pole Single Throw Contactor" S1 {
                ctrl_src = "Model"
                enable_fb_out = "True"
                execution_rate = "Ts"
            }
            [
                position = 8176, 8064
                size = 64, 256
            ]

            component "core/Bus Join" "Bus Join1" {
                inputs = "3"
            }
            [
                position = 8720, 8392
                hide_name = True
            ]

            component "core/Voltage Measurement" Vpcc {
                execution_rate = "Ts"
                sig_output = "True"
            }
            [
                position = 8328, 8064
                rotation = right
                size = 64, 32
            ]

            component "core/Voltage Measurement" Vgrid {
                execution_rate = "Ts"
                sig_output = "True"
            }
            [
                position = 8024, 8064
                rotation = right
                size = 64, 32
            ]

            component "core/Probe" P {
            }
            [
                position = 8808, 7888
                rotation = down
                scale = -1, 1
            ]

            component "core/Single Phase Power Meter" "Single Phase Power Meter1" {
                execution_rate = "Ts"
                frequency = "grid_Fnom"
                op_mode = "PLL based"
            }
            [
                position = 8728, 7920
                hide_name = True
                size = 48, 48
            ]

            component "core/Probe" Q {
            }
            [
                position = 8864, 7920
                rotation = down
                scale = -1, 1
            ]

            component "core/Probe" Irms {
                execution_rate = "Ts"
            }
            [
                position = 8776, 8040
                rotation = down
                scale = -1, 1
            ]

            component "core/RMS value" "RMS value2" {
                execution_rate = "Ts"
                frequency = "grid_Fnom"
            }
            [
                position = 8704, 8104
                hide_name = True
            ]

            component "core/Probe" Vpcc_rms {
                execution_rate = "Ts"
            }
            [
                position = 8776, 8104
                rotation = down
                scale = -1, 1
            ]

            component "core/RMS value" "RMS value1" {
                execution_rate = "Ts"
                frequency = "grid_Fnom"
            }
            [
                position = 8704, 8040
                hide_name = True
            ]

            component "core/Probe" Vgrid_rms {
                execution_rate = "Ts"
            }
            [
                position = 8776, 8176
                rotation = down
                scale = -1, 1
            ]

            component "core/RMS value" "RMS value3" {
                execution_rate = "Ts"
                frequency = "grid_Fnom"
            }
            [
                position = 8704, 8176
                hide_name = True
            ]

            component "core/Probe" Po {
            }
            [
                position = 8712, 8304
            ]

            component "core/Probe" Qo {
            }
            [
                position = 8712, 8248
            ]

            component "core/Current Measurement" i {
                execution_rate = "Ts"
                sig_output = "True"
            }
            [
                position = 8272, 7968
                scale = -1, 1
                size = 64, 32
            ]

            component "core/SCADA Input" Pref {
                execution_rate = "50e-6"
                unit = ""
            }
            [
                position = 8488, 8376
            ]

            component "core/SCADA Input" Qref {
                execution_rate = "50e-6"
                unit = ""
            }
            [
                position = 8544, 8392
            ]

            component "core/SCADA Input" STS {
                def_value = "1"
                execution_rate = "Ts"
                unit = ""
            }
            [
                position = 8112, 7864
            ]

            component "core/Single phase PLL" "Single phase PLL1" {
            }
            [
                position = 8688, 7760
                hide_name = True
                size = 64, 98
            ]

            component "core/Probe" f_pcc {
            }
            [
                position = 8800, 7632
                rotation = left
                scale = -1, 1
            ]

            component "core/Termination" Termination1 {
            }
            [
                position = 8864, 7680
                rotation = left
                hide_name = True
            ]

            component "core/Termination" Termination2 {
            }
            [
                position = 8824, 7680
                rotation = left
                hide_name = True
            ]

            component "core/Termination" Termination6 {
            }
            [
                position = 8736, 7680
                rotation = left
                hide_name = True
            ]

            component "core/Termination" Termination7 {
            }
            [
                position = 8776, 7680
                rotation = left
                hide_name = True
            ]

            component "core/Termination" Termination8 {
            }
            [
                position = 8808, 7960
                hide_name = True
            ]

            port "L in" {
                position = top:1
                kind = pe
            }
            [
                position = 7952, 7968
            ]

            port "N in" {
                position = top:2
                kind = pe
            }
            [
                position = 7960, 8160
            ]

            port "L out" {
                position = bottom:1
                kind = pe
            }
            [
                position = 8432, 7968
                rotation = down
            ]

            port "N out" {
                position = bottom:2
                kind = pe
            }
            [
                position = 8432, 8160
                rotation = down
            ]

            port info_out {
                position = left:3
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                    readonly = True
                }
            }
            [
                position = 8792, 8392
            ]

            tag Goto1 {
                value = "v_grid"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8104, 8064
                hide_name = True
                size = 60, 20
            ]

            tag Goto9 {
                value = "v_pcc"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8408, 8064
                hide_name = True
                size = 60, 20
            ]

            tag Goto10 {
                value = "i"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8344, 7904
                hide_name = True
                size = 60, 20
            ]

            tag From6 {
                value = "i"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8576, 7928
                hide_name = True
                size = 60, 20
            ]

            tag From7 {
                value = "v_pcc"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8640, 7912
                hide_name = True
                size = 60, 20
            ]

            tag From16 {
                value = "v_pcc"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8608, 8104
                hide_name = True
                size = 60, 20
            ]

            tag From18 {
                value = "i"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8608, 8040
                hide_name = True
                size = 60, 20
            ]

            tag From19 {
                value = "v_grid"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8608, 8176
                hide_name = True
                size = 60, 20
            ]

            tag Goto11 {
                value = "STS_fb"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8248, 7864
                hide_name = True
                size = 60, 20
            ]

            tag From20 {
                value = "STS_fb"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8608, 8408
                hide_name = True
                size = 60, 20
            ]

            tag From21 {
                value = "v_pcc"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8592, 7760
                hide_name = True
                size = 60, 20
            ]

            junction Junction7 pe
            [
                position = 8328, 8160
            ]

            junction Junction9 pe
            [
                position = 8024, 8160
            ]

            junction Junction8 pe
            [
                position = 8024, 7968
            ]

            junction Junction19 pe
            [
                position = 8328, 7968
            ]

            junction Junction20 sp
            [
                position = 8672, 8376
            ]

            junction Junction21 sp
            [
                position = 8648, 8392
            ]

            connect "Bus Join1.out" info_out as Connection21
            connect "N out" Junction7 as Connection562
            connect Junction7 S1.b_out as Connection563
            [
                breakpoints = 8256, 8160
            ]
            connect Vpcc.n_node Junction7 as Connection564
            connect S1.b_in Junction9 as Connection568
            connect Junction9 "N in" as Connection569
            connect Vgrid.n_node Junction9 as Connection570
            connect Goto1 Vgrid.out as Connection571
            connect Goto9 Vpcc.out as Connection572
            connect Vgrid.p_node Junction8 as Connection567
            connect Junction8 S1.a_in as Connection566
            connect "L in" Junction8 as Connection565
            connect From7 "Single Phase Power Meter1.Va" as Connection556
            connect From6 "Single Phase Power Meter1.Ia" as Connection555
            connect P.in "Single Phase Power Meter1.P" as Connection558
            connect Q.in "Single Phase Power Meter1.Q" as Connection557
            connect Vpcc_rms.in "RMS value2.out" as Connection605
            connect From16 "RMS value2.in" as Connection606
            connect From18 "RMS value1.in" as Connection561
            connect Irms.in "RMS value1.out" as Connection608
            connect Vgrid_rms.in "RMS value3.out" as Connection609
            connect From19 "RMS value3.in" as Connection610
            connect i.n_node S1.a_out as Connection636
            connect "L out" Junction19 as Connection637
            connect Junction19 Vpcc.p_node as Connection638
            [
                breakpoints = 8328, 7968; 8328, 7968
            ]
            connect i.p_node Junction19 as Connection639
            connect Goto10 i.out as Connection640
            connect S1.feedback_out Goto11 as Connection641
            connect From20 "Bus Join1.in2" as Connection642
            connect Po.in Junction20 as Connection645
            connect Junction20 "Bus Join1.in" as Connection646
            [
                breakpoints = 8672, 8376
            ]
            connect Pref.out Junction20 as Connection647
            connect Qo.in Junction21 as Connection648
            [
                breakpoints = 8648, 8248; 8648, 8376
            ]
            connect Junction21 "Bus Join1.in1" as Connection649
            [
                breakpoints = 8648, 8392
            ]
            connect Qref.out Junction21 as Connection650
            connect STS.out S1.ctrl_in as Connection651
            connect From21 "Single phase PLL1.In" as Connection652
            connect "Single phase PLL1.f" f_pcc.in as Connection653
            connect Termination1.in "Single phase PLL1.sin(wt)" as Connection654
            connect Termination2.in "Single phase PLL1.wt" as Connection655
            connect Termination6.in "Single phase PLL1.d" as Connection656
            connect Termination7.in "Single phase PLL1.q" as Connection657
            connect Termination8.in "Single Phase Power Meter1.S" as Connection658
        }
        [
            position = 8832, 8048
            rotation = right
            size = 136, 72
        ]

        component "core/Ground" gnd4 {
        }
        [
            position = 8616, 8144
            hide_name = True
        ]

        connect L_load.n_node Load.Va as Connection1
        connect R_load.n_node L_load.p_node as Connection2
        connect gnd3.node Load.gnd as Connection3
        connect R_vsc1.n_node L_vsc1.p_node as Connection4
        connect "MGCC STS.N out" gnd4.node as Connection5
    }

    default {
        "core/Bus Join" {
            inputs = "2"
            execution_rate = "inherit"
        }

        "core/C function" {
            input_terminals = "real in;"
            input_terminals_show_labels = "False;"
            input_terminals_feedthrough = "True;"
            input_terminals_dimensions = "inherit;"
            output_terminals = "real out;"
            output_terminals_show_labels = "False;"
            output_terminals_feedthrough = "True;"
            output_terminals_dimensions = "inherit;"
            output_fnc = ""
            update_fnc = ""
            init_fnc = ""
            global_variables = ""
            parameters = ""
            library_load_type = "Compile-time load"
            dll_file_path = ""
            dll_file_path_full = ""
            arm_a9_file_path = ""
            arm_a9_file_path_full = ""
            arm_a53_file_path = ""
            arm_a53_file_path_full = ""
            h_file_path = ""
            h_file_path_full = ""
            add_src_path = ""
            add_src_path_full = ""
            convert_to_relative_dll = "True"
            convert_to_relative_a = "True"
            convert_to_relative_src = "True"
            arb_defs = ""
            add_macros = ""
            skip_pre_cmpl_check = "False"
            generate_for_hil = "True"
            execution_rate = "inherit"
            _supported_platforms = "[\'generic\']"
            refresh = "refresh"
        }

        "core/Capacitor" {
            signal_access = "inherit"
            capacitance = "1e-6"
            initial_voltage = "0"
            pole_shift_ignore = "False"
            visible = "True"
        }

        "core/Constant" {
            value = "1"
            signal_type = "real"
            execution_rate = "100e-6"
            _tunable = "False"
        }

        "core/Inductor" {
            signal_access = "inherit"
            inductance = "1e-3"
            initial_current = "0.0"
            pole_shift_ignore = "False"
            visible = "True"
        }

        "core/Open Circuit" {
            circuit_connector = "false"
            pesb_flag = "false"
            type = "none"
        }

        "core/Probe" {
            signal_access = "inherit"
            addr = "0"
            override_signal_name = "False"
            signal_name = ""
            signal_type = "generic"
            streaming_en = "False"
            streaming_er_idx = "0"
            execution_rate = "inherit"
        }

        "core/RMS value" {
            op_mode = "PLL based"
            frequency = "50"
            period_timeout = "0.5"
            period_deadband = "0"
            filter_en = "False"
            lpf_cutoff = "500"
            frequency_src = "Internal"
            execution_rate = "inherit"
        }

        "core/Resistor" {
            resistance = "1"
            param_set = ""
        }

        "core/SCADA Input" {
            signal_access = "inherit"
            addr = "0"
            format = "real"
            override_signal_name = "False"
            signal_name = ""
            signal_type = "real"
            min = "-1e6"
            max = "1e6"
            def_value = "0"
            unit = " "
            execution_rate = "100e-6"
        }

        "core/Termination" {
            execution_rate = "inherit"
        }

        "core/Current Measurement" {
            signal_access = "inherit"
            bw_limit = "False"
            frequency = "10e3"
            comparator_enable = "False"
            operator = "greater"
            threshold = "0"
            cmp_abs_value = "False"
            feed_forward = "false"
            sig_output = "False"
            sig_output_filt_and_full_bw = "False"
            execution_rate = "100e-6"
            addr = "0"
            nd_msr_estimation = "false"
            dev_cpl_msr = "false"
            host_device = "0"
            output_to_device = "0"
            dev_cpl_index = "0"
            dev_cpl_var_nb = "0"
            visible = "True"
            override_signal_name = "False"
            signal_name = ""
        }

        "core/Double Pole Single Throw Contactor" {
            signal_access = "inherit"
            ctrl_src = "Digital input"
            Sa = "1"
            Sa_logic = "active high"
            enable_fb_out = "False"
            fb_out_type = "real"
            execution_rate = "inherit"
            initial_state = "off"
            on_delay = "0"
            off_delay = "0"
        }

        "core/Signal Controlled Sinusoidal Voltage Source" {
            phase_number = "1"
            execution_rate = "inherit"
        }

        "core/Single Phase Diode Rectifier" {
            signal_access = "inherit"
            FSM_select = "converter"
            show_monitoring = "False"
            dynamic_ac_voltage = "False"
            pesb_optimization = "True"
            predictive_diode_turn_off = "False"
        }

        "core/Single Phase Power Meter" {
            op_mode = "Fixed frequency"
            frequency = "50.0"
            period_timeout = "0.5"
            zero_crossing_calc_filter = "500.0"
            execution_rate = "inherit"
        }

        "core/Single Phase TLM Core Coupling" {
            type = "Inductive"
            capacitance = "1e-06"
            inductance = "1e-3"
            embedded_components = "False"
            ratio_type = "Automatic"
            ratio = "0.1"
            embedded_inductors_initial_current = "0.0"
            embedded_capacitors_initial_voltage = "0.0"
        }

        "core/Single Pole Single Throw Contactor" {
            signal_access = "inherit"
            ctrl_src = "Digital input"
            Sa = "1"
            Sa_logic = "active high"
            enable_fb_out = "False"
            fb_out_type = "real"
            execution_rate = "inherit"
            initial_state = "off"
            on_delay = "0"
            off_delay = "0"
            switching = "any current"
            hide_int_meas = "False"
        }

        "core/Single phase PLL" {
            scheduling_mode = "Enable"
            offset_Hz = "55"
            delta_Hz_max = "10"
            vd_init = "200"
            angle_init = "0"
            k_SOGI = "0.4"
            kp_PLL_LOW = "4.81e3"
            kp_PLL_HIGH = "527"
            ki_PLL_LOW = "1.84e4"
            ki_PLL_HIGH = "2.22e3"
            kd_PLL_LOW = "-5.19"
            kd_PLL_HIGH = "-0.519"
            Tf_kd_PLL = "0.00108"
            fc_LPF_vd = "20"
            fc_LPF_wPLL = "100"
            fc_LPF_fPLL = "10"
            execution_rate = "inherit"
        }

        "core/Voltage Measurement" {
            signal_access = "inherit"
            bw_limit = "False"
            frequency = "10e3"
            comparator_enable = "False"
            operator = "greater"
            threshold = "0"
            cmp_abs_value = "False"
            feed_forward = "false"
            sig_output = "False"
            sig_output_filt_and_full_bw = "False"
            execution_rate = "100e-6"
            addr = "0"
            nd_msr_estimation = "false"
            dev_cpl_msr = "false"
            host_device = "0"
            output_to_device = "0"
            dev_cpl_index = "0"
            dev_cpl_var_nb = "0"
            visible = "True"
            override_signal_name = "False"
            signal_name = ""
        }
    }

    CODE model_init
        # Numpy module is imported as 'np'
        # Scipy module is imported as 'sp'
        # The Schematic API is imported as 'mdl'
        # To get the model file path, use 'mdl.get_model_file_path()'
        # To print information to the console, use info()
        
        # Load Constants
            # Line to load
            L_LOAD = 20e-6
            R_LOAD = 10e-3
            # Load
            VRMS_NOM = 220
            F_NOM = 60
            VA_NOM = 15e3
    ENDCODE
}
