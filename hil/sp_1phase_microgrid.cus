<ui_settings>
    <version>2.8</version>
    <model_locked>False</model_locked>
    <canvas_bg_color>#ffffff</canvas_bg_color>
    <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts.
# NOTE: This code is always executed prior to simulation start.

# The variable 'SETTINGS_DIR' holds the directory where the loaded Panel .cus file is located.
# Also you can call the 'get_settings_dir_path()' function in any
# Macro and Expression script to get the same directory.
SETTINGS_DIR = get_settings_dir_path()

# The 'add_to_python_path(folder)' function can be used to add a custom folder
# with Python files and packages to the PYTHONPATH. After a folder is added, all Python
# files and Python packages from it can be imported into the SCADA Namespace.

# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# Numpy module is imported as 'np'
# Scipy module is imported as 'sp'
# Schematic Editor model namespace is imported as 'scm'
# Function for printing to the HIL SCADA Message log is imported as 'printf'.

]]></initialization_code>
    <components>
        <component_data>
                <id>765183d6eb0b11ee8137948513891d18</id>
                <name><![CDATA[MÉTRICAS DA REDE DA CONCESSIONÁRIA]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['765183d7eb0b11eeba69948513891d18', '765183d8eb0b11eead07948513891d18']]]></components_ids>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be available for use in
# all Macro, Expression and handlers codes of components owned by this widget.
# This code is always executed prior simulation start. In case this is a
# Library Widget, this code is also executed on drag and drop, Panel load
# and widget paste.
#
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

]]></initialization_code>
                <widget_settings>
                    <x>336</x>
                    <y>328</y>
                    <width>360</width>
                    <height>160</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                    <hierarchy_position>1</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                
                <linked_model_components_settings>
                    </linked_model_components_settings>
            </component_data>
        <component_data>
                <id>765183d7eb0b11eeba69948513891d18</id>
                <name><![CDATA[Frequência]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing value that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[OMEGA_VSC2]]></signal_name>
                <unit><![CDATA[Hz]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <scaling_factor>0.15915494309</scaling_factor>
                <widget_settings>
                    <x>184</x>
                    <y>40</y>
                    <width>160</width>
                    <height>64</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>765183d8eb0b11eead07948513891d18</id>
                <name><![CDATA[Tensão RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing value that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[VPOI_GRID]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>8</x>
                    <y>40</y>
                    <width>160</width>
                    <height>64</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>05565559eb0c11ee8127948513891d18</id>
                <name><![CDATA[MÉTRICAS PARA O SEGUIDOR DE REDE]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['0556555aeb0c11eea89a948513891d18', '0556555beb0c11eea71c948513891d18', '0556555ceb0c11ee8030948513891d18', '0556555deb0c11eea704948513891d18', '0556555eeb0c11ee8b78948513891d18']]]></components_ids>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be available for use in
# all Macro, Expression and handlers codes of components owned by this widget.
# This code is always executed prior simulation start. In case this is a
# Library Widget, this code is also executed on drag and drop, Panel load
# and widget paste.
#
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

]]></initialization_code>
                <widget_settings>
                    <x>712</x>
                    <y>328</y>
                    <width>360</width>
                    <height>456</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                    <hierarchy_position>1</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                
                <linked_model_components_settings>
                    </linked_model_components_settings>
            </component_data>
        <component_data>
                <id>0556555aeb0c11eea89a948513891d18</id>
                <name><![CDATA[Frequência]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing value that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[OMEGA_VSC2]]></signal_name>
                <unit><![CDATA[Hz]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <scaling_factor>0.15915494309</scaling_factor>
                <widget_settings>
                    <x>184</x>
                    <y>16</y>
                    <width>160</width>
                    <height>64</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>0556555beb0c11eea71c948513891d18</id>
                <name><![CDATA[Tensão RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing value that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[VRMS_VSC2]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>8</x>
                    <y>16</y>
                    <width>160</width>
                    <height>64</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>0556555ceb0c11ee8030948513891d18</id>
                <name><![CDATA[Potência Ativa]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing value that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[P_VSC2]]></signal_name>
                <unit><![CDATA[kW]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <scaling_factor>0.001</scaling_factor>
                <widget_settings>
                    <x>8</x>
                    <y>88</y>
                    <width>160</width>
                    <height>64</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>0556555deb0c11eea704948513891d18</id>
                <name><![CDATA[Potência Reativa]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing value that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Q_VSC2]]></signal_name>
                <unit><![CDATA[kVAr]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <scaling_factor>0.001</scaling_factor>
                <widget_settings>
                    <x>184</x>
                    <y>88</y>
                    <width>160</width>
                    <height>64</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>0556555eeb0c11ee8b78948513891d18</id>
                <name><![CDATA[Potências]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Signals</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing values that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": [],

    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [],

    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],

    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
displayValue = data
]]></code>
                <analog_signals><![CDATA[['P_VSC2', 'Q_VSC2']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <analog_signals_scaling_factors><![CDATA[{'P_VSC2': 0.001, 'Q_VSC2': 0.001}]]></analog_signals_scaling_factors>
                <streaming_analog_signals_scaling_factors><![CDATA[{}]]></streaming_analog_signals_scaling_factors>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <widget_settings>
                    <x>16</x>
                    <y>176</y>
                    <width>320</width>
                    <height>224</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[kW | kVAr]]></y_title>
                    <y_range_min>-100.0</y_range_min>
                    <y_range_max>100.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>True</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>2d5a696feb0c11ee80d3948513891d18</id>
                <name><![CDATA[INTERFACE PARA O SEGUIDOR DE REDE]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['2d5a6970eb0c11eeb687948513891d18', '2d5a6971eb0c11eeb6f8948513891d18', '2d5a6972eb0c11eeacfb948513891d18', '2d5a6973eb0c11ee9365948513891d18']]]></components_ids>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be available for use in
# all Macro, Expression and handlers codes of components owned by this widget.
# This code is always executed prior simulation start. In case this is a
# Library Widget, this code is also executed on drag and drop, Panel load
# and widget paste.
#
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

]]></initialization_code>
                <widget_settings>
                    <x>336</x>
                    <y>504</y>
                    <width>360</width>
                    <height>280</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                    <hierarchy_position>1</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                
                <linked_model_components_settings>
                    </linked_model_components_settings>
            </component_data>
        <component_data>
                <id>2d5a6970eb0c11eeb687948513891d18</id>
                <name><![CDATA[q_ref]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.
# NOTE: entered value is available through variable 'inputValue'

hil.model_write('SC_QREF_VSC2', inputValue)]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it,
# widget value won't be changed.
widgetValue = None
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it,
# widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change the widget value by setting this variable.
# NOTE: If you do not specify a 'widgetValue' variable or assign 'None' to it,
# the widget value will not be changed.
widgetValue = hil.model_read('SC_QREF_VSC2')
]]></on_timer_code>
                <on_start_code_source><![CDATA[Macro code]]></on_start_code_source>
                <inputValue><![CDATA[0.0]]></inputValue>
                <min>-5000.0</min>
                <max>5000.0</max>
                <step>50.0</step>
                <widget_settings>
                    <x>16</x>
                    <y>184</y>
                    <width>320</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[Referência de Potência Reativa]]></label>
                    <use_label>True</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>2d5a6971eb0c11eeb6f8948513891d18</id>
                <name><![CDATA[p_ref]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.
# NOTE: entered value is available through variable 'inputValue'

hil.model_write('SC_PREF_VSC2', inputValue)]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it,
# widget value won't be changed.
widgetValue = None
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it,
# widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change the widget value by setting this variable.
# NOTE: If you do not specify a 'widgetValue' variable or assign 'None' to it,
# the widget value will not be changed.
widgetValue = hil.model_read('SC_PREF_VSC2')
]]></on_timer_code>
                <on_start_code_source><![CDATA[Macro code]]></on_start_code_source>
                <inputValue><![CDATA[0.0]]></inputValue>
                <min>0.0</min>
                <max>15000.0</max>
                <step>100.0</step>
                <widget_settings>
                    <x>16</x>
                    <y>120</y>
                    <width>320</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[Referência de Potência Ativa]]></label>
                    <use_label>True</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>2d5a6972eb0c11eeacfb948513891d18</id>
                <name><![CDATA[Button5]]></name>
                <type>MacroButton</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

hil.set_scada_input_value('SC_ENABLE_VSC2', 1)
hil.wait_msec(100.0)]]></on_use_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.
hil.set_scada_input_value('mgcc_req2tieSR', 0)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

]]></on_stop_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <widget_settings>
                    <x>16</x>
                    <y>16</y>
                    <width>320</width>
                    <height>40</height>
                    <appearance><![CDATA[Raised]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[Solicitação para conectar o Seguidor de Rede]]></label>
                    <use_label>True</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>2d5a6973eb0c11ee9365948513891d18</id>
                <name><![CDATA[Button6]]></name>
                <type>MacroButton</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

hil.set_scada_input_value('SC_ENABLE_VSC2', 0)
hil.wait_msec(500.0)]]></on_use_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.
hil.set_scada_input_value('mgcc_req2untieSR', 0)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

]]></on_stop_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <widget_settings>
                    <x>16</x>
                    <y>64</y>
                    <width>320</width>
                    <height>40</height>
                    <appearance><![CDATA[Raised]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[Solicitação para desconectar o Seguidor de Rede]]></label>
                    <use_label>True</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>3f839202eb0c11ee88fe948513891d18</id>
                <name><![CDATA[DEBUG]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['3f839203eb0c11eebd67948513891d18', '3f839204eb0c11ee98dd948513891d18', '3f839205eb0c11eeb7a8948513891d18']]]></components_ids>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be available for use in
# all Macro, Expression and handlers codes of components owned by this widget.
# This code is always executed prior simulation start. In case this is a
# Library Widget, this code is also executed on drag and drop, Panel load
# and widget paste.
#
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

]]></initialization_code>
                <widget_settings>
                    <x>192</x>
                    <y>328</y>
                    <width>120</width>
                    <height>320</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                    <hierarchy_position>1</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                
                <linked_model_components_settings>
                    </linked_model_components_settings>
            </component_data>
        <component_data>
                <id>3f839203eb0c11eebd67948513891d18</id>
                <name><![CDATA[FLAG_MCH]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[debug_mch]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>8</x>
                    <y>128</y>
                    <width>96</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>3f839204eb0c11ee98dd948513891d18</id>
                <name><![CDATA[FLAG_SPC]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[debug_spc]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>8</x>
                    <y>40</y>
                    <width>96</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>3f839205eb0c11eeb7a8948513891d18</id>
                <name><![CDATA[FLAG_DTV]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[debug_dtv]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>8</x>
                    <y>216</y>
                    <width>96</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>4f6be3b8eb0c11ee8c8a948513891d18</id>
                <name><![CDATA[Capture/Scope]]></name>
                <type>Capture/Scope</type>
                <description><![CDATA[]]></description>
                <working_mode>windowed</working_mode>
                <widget_settings>
                    <x>192</x>
                    <y>664</y>
                    <width>120</width>
                    <height>120</height>
                    <hierarchy_position>1</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                    <appearance><![CDATA[Flat]]></appearance>
                    <state>Capture</state>
                    <layout>None</layout>
                    <virtual_signals_definitions>
                    </virtual_signals_definitions>
                    <presets>
                        <active_capture_preset><![CDATA[Default]]></active_capture_preset>
                        <active_scope_preset><![CDATA[Default]]></active_scope_preset>
                        <capture name="Default">
                            <time_interval>10.0</time_interval>
                            <sample_rate>200000.0</sample_rate>
                            <background_color>white</background_color>
                            <layout>Vertical</layout>
                            <legend>True</legend>
                            <analog_signals>
                                <analog>
                                    <channel>0</channel>
                                    <name><![CDATA[VC_VSC1]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>0</row>
                                    <viewports>
                                   </viewports>
                               </analog>
                                <analog>
                                    <channel>1</channel>
                                    <name><![CDATA[VREF_VSC1]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>1</row>
                                    <viewports>
                                   </viewports>
                               </analog>
                                <analog>
                                    <channel>2</channel>
                                    <name><![CDATA[P_VSC1]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>2</row>
                                    <viewports>
                                        <num_viewport>3</num_viewport>
                                   </viewports>
                               </analog>
                                <analog>
                                    <channel>3</channel>
                                    <name><![CDATA[Q_VSC1]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>3</row>
                                    <viewports>
                                        <num_viewport>4</num_viewport>
                                   </viewports>
                               </analog>
                                <analog>
                                    <channel>4</channel>
                                    <name><![CDATA[UV_VSC1]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>5</row>
                                    <viewports>
                                   </viewports>
                               </analog>
                                <analog>
                                    <channel>5</channel>
                                    <name><![CDATA[PWMA_VSC1]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>4</row>
                                    <viewports>
                                   </viewports>
                               </analog>
                                <analog>
                                    <channel>6</channel>
                                    <name><![CDATA[V_DROOP]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>6</row>
                                    <viewports>
                                        <num_viewport>1</num_viewport>
                                   </viewports>
                               </analog>
                                <analog>
                                    <channel>7</channel>
                                    <name><![CDATA[OMEGA_DROOP]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>7</row>
                                    <viewports>
                                        <num_viewport>2</num_viewport>
                                   </viewports>
                               </analog>
                            </analog_signals>
                            <digital_signals>
                            </digital_signals>
                            <virtual_signals>
                            </virtual_signals>
                            <trigger>
                                <device>0</device>
                                <is_force>True</is_force>
                                <type>Analog</type>
                                <source><![CDATA[VC_VSC1]]></source>
                                <edge>Rising edge</edge>
                                <treshold>0.0</treshold>
                                <offset>0.0</offset>
                                <useFirstTrigger>False</useFirstTrigger>
                            </trigger>
                            <plotting_options in_use="False">
                                <subplots>
                                    </subplots>
                            </plotting_options>
                        </capture>
                        <scope name="Default">
                            <background_color>white</background_color>
                            <layout>Grid</layout>
                            <legend>True</legend>
                            <show_viewports>1</show_viewports>
                            <decimation>3.0</decimation>
                            <time_base>0.01</time_base>
                            <analog_signals>
                            </analog_signals>
                            <digital_signals>
                            </digital_signals>
                            <trigger>
                                <device>-1</device>
                                <is_force>False</is_force>
                                <type>Analog</type>
                                <source>None</source>
                                <edge>Rising edge</edge>
                                <treshold>0.0</treshold>
                                <offset>50.0</offset>
                                <useFirstTrigger>False</useFirstTrigger>
                            </trigger>
                        </scope>
                        </presets>
                    <capture>
                        <time_interval>10.0</time_interval>
                        <sample_rate>200000.0</sample_rate>
                        <background_color>white</background_color>
                        <layout>Vertical</layout>
                        <legend>True</legend>
                        <trigger>
                            <type>Analog</type>
                            <source>VC_VSC1</source>
                            <edge>Rising edge</edge>
                            <treshold>0.0</treshold>
                            <offset>0.0</offset>
                            <useFirstTrigger>False</useFirstTrigger>
                        </trigger>
                        <analog_signals>
                            <analog>
                                    <channel>0</channel>
                                    <name><![CDATA[VC_VSC1]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>0</row>
                                    <viewports>
                                   </viewports>
                               </analog>
                            <analog>
                                    <channel>1</channel>
                                    <name><![CDATA[VREF_VSC1]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>1</row>
                                    <viewports>
                                   </viewports>
                               </analog>
                            <analog>
                                    <channel>2</channel>
                                    <name><![CDATA[P_VSC1]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>2</row>
                                    <viewports>
                                        <num_viewport>3</num_viewport>
                                   </viewports>
                               </analog>
                            <analog>
                                    <channel>3</channel>
                                    <name><![CDATA[Q_VSC1]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>3</row>
                                    <viewports>
                                        <num_viewport>4</num_viewport>
                                   </viewports>
                               </analog>
                            <analog>
                                    <channel>4</channel>
                                    <name><![CDATA[UV_VSC1]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>5</row>
                                    <viewports>
                                   </viewports>
                               </analog>
                            <analog>
                                    <channel>5</channel>
                                    <name><![CDATA[PWMA_VSC1]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>4</row>
                                    <viewports>
                                   </viewports>
                               </analog>
                            <analog>
                                    <channel>6</channel>
                                    <name><![CDATA[V_DROOP]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>6</row>
                                    <viewports>
                                        <num_viewport>1</num_viewport>
                                   </viewports>
                               </analog>
                            <analog>
                                    <channel>7</channel>
                                    <name><![CDATA[OMEGA_DROOP]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>7</row>
                                    <viewports>
                                        <num_viewport>2</num_viewport>
                                   </viewports>
                               </analog>
                        </analog_signals>
                         <digital_signals>
                         </digital_signals>
                    </capture>
                    <scope>
                        <time_base>0.01 </time_base>
                        <background_color>white</background_color>
                        <layout>Grid</layout>
                        <legend>True</legend>
                        <trigger>
                            <mode>Auto</mode>
                            <type>Analog</type>
                            <source>None</source>
                            <edge>Rising edge</edge>
                            <treshold>0.0</treshold>
                            <offset>50.0</offset>
                        </trigger>
                         <analog_signals>
                        </analog_signals>
                        <digital_signals>
                        </digital_signals>
                    </scope>
                    <plotting_options in_use="False">
                    
                        <subplots>
                            </subplots>
                    </plotting_options>
                </widget_settings>

            </component_data>
        <component_data>
                <id>789398a5eb0c11ee9c9d948513891d18</id>
                <name><![CDATA[INTERFACE PARA OPERAÇÃO DA MICRORREDE]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['789398a6eb0c11eea690948513891d18', '789398a7eb0c11eea684948513891d18']]]></components_ids>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be available for use in
# all Macro, Expression and handlers codes of components owned by this widget.
# This code is always executed prior simulation start. In case this is a
# Library Widget, this code is also executed on drag and drop, Panel load
# and widget paste.
#
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

]]></initialization_code>
                <widget_settings>
                    <x>336</x>
                    <y>144</y>
                    <width>736</width>
                    <height>168</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                    <hierarchy_position>1</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                
                <linked_model_components_settings>
                    </linked_model_components_settings>
            </component_data>
        <component_data>
                <id>789398a6eb0c11eea690948513891d18</id>
                <name><![CDATA[Button2]]></name>
                <type>MacroButton</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

hil.set_scada_input_value('SC_ENABLE_GRID', 0)
hil.wait_msec(100.0)]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.
hil.set_scada_input_value('mgcc_req2island', 0)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

]]></on_stop_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <widget_settings>
                    <x>192</x>
                    <y>72</y>
                    <width>320</width>
                    <height>40</height>
                    <appearance><![CDATA[Raised]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[Solicitação para ilhamento]]></label>
                    <use_label>True</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>789398a7eb0c11eea684948513891d18</id>
                <name><![CDATA[Button1]]></name>
                <type>MacroButton</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

hil.set_scada_input_value('SC_ENABLE_GRID', 1)
hil.wait_msec(100.0)]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.
hil.set_scada_input_value('mgcc_req2tie', 0)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

]]></on_stop_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <widget_settings>
                    <x>192</x>
                    <y>24</y>
                    <width>320</width>
                    <height>40</height>
                    <appearance><![CDATA[Raised]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[Solicitação para conectar-se à Rede da Concessionária]]></label>
                    <use_label>True</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>dd8756e2eb1111ee83ed948513891d18</id>
                <name><![CDATA[CONECTADO A REDE]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[S_GRID.feedback]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>1152</x>
                    <y>168</y>
                    <width>264</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>f3eb951deb1111eea251948513891d18</id>
                <name><![CDATA[VSC2 CONECTADO]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[S_VSC2_FEEDBACK]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>1152</x>
                    <y>280</y>
                    <width>264</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>899bc53eebcc11eebe96d36ead25a8ff</id>
                <name><![CDATA[INTERFACE PARA O FORMADOR DE REDE]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['899bc53febcc11ee8537d36ead25a8ff', '899bc540ebcc11ee8f57d36ead25a8ff', '899bc541ebcc11ee8196d36ead25a8ff', '899bc542ebcc11ee92a4d36ead25a8ff']]]></components_ids>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be available for use in
# all Macro, Expression and handlers codes of components owned by this widget.
# This code is always executed prior simulation start. In case this is a
# Library Widget, this code is also executed on drag and drop, Panel load
# and widget paste.
#
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

]]></initialization_code>
                <widget_settings>
                    <x>1088</x>
                    <y>504</y>
                    <width>360</width>
                    <height>280</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                    <hierarchy_position>1</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                
                <linked_model_components_settings>
                    </linked_model_components_settings>
            </component_data>
        <component_data>
                <id>899bc543ebcc11ee920cd36ead25a8ff</id>
                <name><![CDATA[MÉTRICAS PARA O FORMADOR DE REDE]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['899bc544ebcc11ee948fd36ead25a8ff', '899bc545ebcc11eeb3d0d36ead25a8ff', '899bc546ebcc11eea66bd36ead25a8ff', '899bc547ebcc11eeb3ccd36ead25a8ff', '899bc548ebcc11eea21ed36ead25a8ff']]]></components_ids>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be available for use in
# all Macro, Expression and handlers codes of components owned by this widget.
# This code is always executed prior simulation start. In case this is a
# Library Widget, this code is also executed on drag and drop, Panel load
# and widget paste.
#
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

]]></initialization_code>
                <widget_settings>
                    <x>1456</x>
                    <y>328</y>
                    <width>360</width>
                    <height>456</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                    <hierarchy_position>1</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                
                <linked_model_components_settings>
                    </linked_model_components_settings>
            </component_data>
        <component_data>
                <id>899bc53febcc11ee8537d36ead25a8ff</id>
                <name><![CDATA[q_ref]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.
# NOTE: entered value is available through variable 'inputValue'

hil.model_write('SC_QREF_VSC1', inputValue)]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it,
# widget value won't be changed.
widgetValue = None
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it,
# widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change the widget value by setting this variable.
# NOTE: If you do not specify a 'widgetValue' variable or assign 'None' to it,
# the widget value will not be changed.
widgetValue = hil.model_read('SC_QREF_VSC1')
]]></on_timer_code>
                <on_start_code_source><![CDATA[Macro code]]></on_start_code_source>
                <inputValue><![CDATA[0]]></inputValue>
                <min>-5000.0</min>
                <max>5000.0</max>
                <step>50.0</step>
                <widget_settings>
                    <x>16</x>
                    <y>184</y>
                    <width>320</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[Referência de Potência Reativa]]></label>
                    <use_label>True</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>899bc540ebcc11ee8f57d36ead25a8ff</id>
                <name><![CDATA[p_ref]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.
# NOTE: entered value is available through variable 'inputValue'

hil.model_write('SC_PREF_VSC1', inputValue)]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it,
# widget value won't be changed.
widgetValue = None
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it,
# widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change the widget value by setting this variable.
# NOTE: If you do not specify a 'widgetValue' variable or assign 'None' to it,
# the widget value will not be changed.
widgetValue = hil.model_read('SC_PREF_VSC1')
]]></on_timer_code>
                <on_start_code_source><![CDATA[Macro code]]></on_start_code_source>
                <inputValue><![CDATA[0]]></inputValue>
                <min>0.0</min>
                <max>15000.0</max>
                <step>100.0</step>
                <widget_settings>
                    <x>16</x>
                    <y>120</y>
                    <width>320</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[Referência de Potência Ativa]]></label>
                    <use_label>True</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>899bc541ebcc11ee8196d36ead25a8ff</id>
                <name><![CDATA[Button5]]></name>
                <type>MacroButton</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

hil.set_scada_input_value('SC_ENABLE_VSC1', 1)
hil.wait_msec(100.0)]]></on_use_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.
hil.set_scada_input_value('mgcc_req2tieSR', 0)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

]]></on_stop_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <widget_settings>
                    <x>16</x>
                    <y>16</y>
                    <width>320</width>
                    <height>40</height>
                    <appearance><![CDATA[Raised]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[Solicitação para conectar o Formador de Rede]]></label>
                    <use_label>True</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>899bc542ebcc11ee92a4d36ead25a8ff</id>
                <name><![CDATA[Button6]]></name>
                <type>MacroButton</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

hil.set_scada_input_value('SC_ENABLE_VSC1', 0)
hil.wait_msec(500.0)]]></on_use_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.
hil.set_scada_input_value('mgcc_req2untieSR', 0)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

]]></on_stop_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <widget_settings>
                    <x>16</x>
                    <y>64</y>
                    <width>320</width>
                    <height>40</height>
                    <appearance><![CDATA[Raised]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[Solicitação para desconectar o Formador de Rede]]></label>
                    <use_label>True</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>899bc544ebcc11ee948fd36ead25a8ff</id>
                <name><![CDATA[Frequência]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing value that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[OMEGA_VSC2]]></signal_name>
                <unit><![CDATA[Hz]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <scaling_factor>0.15915494309</scaling_factor>
                <widget_settings>
                    <x>184</x>
                    <y>16</y>
                    <width>160</width>
                    <height>64</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>899bc545ebcc11eeb3d0d36ead25a8ff</id>
                <name><![CDATA[Tensão RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing value that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[VRMS_VSC1]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>8</x>
                    <y>16</y>
                    <width>160</width>
                    <height>64</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>899bc546ebcc11eea66bd36ead25a8ff</id>
                <name><![CDATA[Potência Ativa]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing value that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[P_VSC1]]></signal_name>
                <unit><![CDATA[kW]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <scaling_factor>0.001</scaling_factor>
                <widget_settings>
                    <x>8</x>
                    <y>88</y>
                    <width>160</width>
                    <height>64</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>899bc547ebcc11eeb3ccd36ead25a8ff</id>
                <name><![CDATA[Potência Reativa]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing value that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Q_VSC1]]></signal_name>
                <unit><![CDATA[kVAr]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <scaling_factor>0.001</scaling_factor>
                <widget_settings>
                    <x>184</x>
                    <y>88</y>
                    <width>160</width>
                    <height>64</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>899bc548ebcc11eea21ed36ead25a8ff</id>
                <name><![CDATA[Potências]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Signals</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing values that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": [],

    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [],

    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],

    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
displayValue = data
]]></code>
                <analog_signals><![CDATA[['P_VSC1', 'Q_VSC1']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <analog_signals_scaling_factors><![CDATA[{'P_VSC1': 0.001, 'Q_VSC1': 0.001}]]></analog_signals_scaling_factors>
                <streaming_analog_signals_scaling_factors><![CDATA[{}]]></streaming_analog_signals_scaling_factors>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <widget_settings>
                    <x>16</x>
                    <y>176</y>
                    <width>320</width>
                    <height>224</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[kW | kVAr]]></y_title>
                    <y_range_min>-100.0</y_range_min>
                    <y_range_max>100.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>True</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>bcfac0b5ebcc11ee9c9ed36ead25a8ff</id>
                <name><![CDATA[VSC1 CONECTADO]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[S_VSC1_FEEDBACK]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>1152</x>
                    <y>224</y>
                    <width>264</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>03c27ea2ebcd11ee9478d36ead25a8ff</id>
                <name><![CDATA[Button5]]></name>
                <type>MacroButton</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

hil.set_scada_input_value('SC_ENABLE_LOAD', 1)
hil.wait_msec(100.0)]]></on_use_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.
hil.set_scada_input_value('mgcc_req2tieSR', 0)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

]]></on_stop_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <widget_settings>
                    <x>912</x>
                    <y>848</y>
                    <width>320</width>
                    <height>40</height>
                    <appearance><![CDATA[Raised]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[Conectar Carga]]></label>
                    <use_label>True</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>1c246a80ebcd11eeae49d36ead25a8ff</id>
                <name><![CDATA[Button6]]></name>
                <type>MacroButton</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

hil.set_scada_input_value('SC_ENABLE_LOAD', 0)
hil.wait_msec(100.0)]]></on_use_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.
hil.set_scada_input_value('mgcc_req2tieSR', 0)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

]]></on_stop_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <widget_settings>
                    <x>912</x>
                    <y>896</y>
                    <width>320</width>
                    <height>40</height>
                    <appearance><![CDATA[Raised]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[Desconectar Carga]]></label>
                    <use_label>True</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>280dc035ebcd11ee8141d36ead25a8ff</id>
                <name><![CDATA[CARGA CONECTADA]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[S_LOAD_FEEDBACK]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>928</x>
                    <y>968</y>
                    <width>264</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        </components>
</ui_settings>